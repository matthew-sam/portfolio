<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EduSphere User Table</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-alpha.6/css/bootstrap.min.css">
    <!--Need to clean style up still-->
    <style>
        @import url('https://fonts.googleapis.com/css?family=Montserrat:400,500');
    
        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #f5f5f5;
            color: #333;
            padding: 0px;
        }
    
        h2 {
            font-size: 2.5rem;
            color: #333;
            margin-bottom: 20px;
        }
    
        .container {
            max-width: 960px;
            margin: auto;
            background: rgb(255, 255, 255);
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
    
        table, th, td {
            border: 1px solid #000000;
        }
    
        th, td {
            text-align: left;
            padding: 8px;
        }
    
        th {
            background-color: #007bff;
            color: white;
            font-weight: 500;
        }
    
        tr:nth-child(even) {
            background-color: #b9c1ff33;
        }
    
        tr:hover {
            background-color: #adcfff6f;
        }
    
        input[type="file"] {
            margin-bottom: 10px;
        }
    
        .container button {
            border: 1px solid #ccc;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            margin-right: 5px;
        }
    
        .container .edit { background-color: #ffc107; }
        .container .delete { background-color: #dc3545; }
        .container .save { background-color: #28a745; }
        .container input[type="button"] { background-color: #c9c9c9; color: rgb(0, 0, 0); }
    
        .container .edit:hover,
        .container .delete:hover,
        .container .save:hover,
        .container input[type="button"]:hover {
            opacity: 0.9;
        }
    
        .add {
            float: right;
            background-color: #28a745;
            color: white;
            padding: 7px 12px;
            border-radius: 5px;
            cursor: pointer;
        }
    
        .add:hover {
            background-color: #218838;
        }
    
    </style> 
</head>
<body>
    <div class="container">
        <h2>EduSphere Users</h2>
        <table border="1">
            <thead>
                <tr>
                    <th>UserID</th>
                    <th>Student Name</th>
                    <th>Grade Level</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
              {% for row in data %}
               <tr id="row_{{ loop.index }}">
                    <td contenteditable="false">{{ row.UserID }}</td>
                    <td contenteditable="false">{{ row.studentName }}</td>
                    <td contenteditable="false">{{ row.gradeLevel }}</td>
                    <td>
                      <button onclick="editRow('row_{{ loop.index }}')">Edit</button>
                      <button onclick="deleteRow('row_{{ loop.index }}', '{{ row.UserID }}')">Delete</button>
                   </td>
              </tr>
              {% endfor %}              
          </tbody>
        </table>
        <button onclick="addStudentRow()">Add User</button>
        <form id="uploadForm" enctype="multipart/form-data">
            <input type="file" id="fileInput" name="file">
            <input type="button" value="Upload CSV" onclick="uploadCSV()">
        </form>
    </div>
    <script>
        // add the edit action and save button to the table, don't think the issue is here
        function editRow(rowId) {
            // Ensure the rowId used here matches the id attribute of the <tr>
            const row = document.getElementById(rowId);
            if (!row) {
                console.error('Row not found:', rowId);
                return;
            }

            for (let i = 1; i < row.cells.length - 1; i++) { // Skip Actions column
                row.cells[i].contentEditable = true;
            }
    
            // Change Edit button to Save
            const editButton = row.cells[row.cells.length - 1].getElementsByTagName('button')[0];
            editButton.innerText = 'Save';
            editButton.onclick = function() { saveRow(rowId); };
            }

        // add the save button action and uses UserID
        function saveRow(rowId) {
            const row = document.getElementById(rowId);
            let rowData = {
                UserID: row.cells[0].innerText,
                studentName: row.cells[1].innerText,
                gradeLevel: row.cells[2].innerText
            };
            
            // AJAX call to Flask for database update
            fetch('/update-student', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(rowData),
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch((error) => {
                console.error('Error:', error);
            });

            for (let i = 0; i < row.cells.length - 1; i++) {
                row.cells[i].contentEditable = false;
            }
            // Change Save button back to Edit
            const saveButton = row.cells[row.cells.length - 1].getElementsByTagName('button')[0];
            saveButton.innerText = 'Edit';
            saveButton.onclick = function() { editRow(rowId); };
        }

        // delete row from SQL table and uses UserID
        function deleteRow(rowId, UserID) {
            // Confirm before deletion
            if (!confirm('Are you sure you want to delete this student?')) return;

            // AJAX call to Flask for database deletion
            fetch('/delete-student', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ UserID: UserID }),
            })
            .then(response => response.json())
            .then(data => {
                console.log('Delete Success:', data);
                // Remove the row from HTML table
                document.getElementById(rowId).remove();
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }

        // add student row to page and refresh page (decided to go away from adding in edit mode)
        function addStudentRow() {
            // Generate a unique ID for the new row
            const uniqueId = `new_${new Date().getTime()}`;

            // Append a new row to the table
            const table = document.querySelector("table tbody");
            const newRow = table.insertRow(-1); // Adds the row at the end of the table
            newRow.id = uniqueId;
            
            /* Decided to just refresh page to get the new row displayed
            // Add cells for UserID, studentName, gradeLevel, and actions
            const cell1 = newRow.insertCell(0);
            cell1.contentEditable = false; // This is UserID
            const cell2 = newRow.insertCell(1);
            cell2.contentEditable = true; 
            const cell3 = newRow.insertCell(2);
            cell3.contentEditable = true; 
            const cell4 = newRow.insertCell(3);
            cell4.innerHTML = `<button onclick="saveNewRow('${uniqueId}')">Save</button>`; // Add a save button
            */

            // AJAX call to Flask to add a new blank student record
            fetch('/add-student', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ uniqueId: uniqueId }) // Send unique ID or any other needed data
            })
            .then(response => response.json())
            .then(data => {
                console.log('Add Student Success:', data);
                location.reload(); // Possibly just a quick fix for now
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }

        // save the edits made to newly added row to SQL and accounts for UserID
        function saveNewRow(rowId) {
            const row = document.getElementById(rowId);
            // this is fine since UserID is the 3rd column in my SQL table (i think) or in SQL i have it set to autogen UserID already
            let rowData = {
                studentName: row.cells[0].innerText || 'Name',
                gradeLevel: row.cells[1].innerText || 'Grade'
            };

            // AJAX call to Flask for updating the new row in the database
            fetch('/update-student', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(rowData),
            })
            .then(response => response.json())
            .then(data => {
                console.log('Save New Student Success:', data);
                const saveButton = row.querySelector("button");
                saveButton.outerHTML = `<button onclick="editRow('${row.id}')">Edit</button>` +
                                       `<button onclick="deleteRow('${row.id}', '${rowData.UserID}')">Delete</button>`;
                // Make the cells non-editable
                for (let i = 0; i < row.cells.length - 1; i++) {
                    row.cells[i].contentEditable = false;
                }
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }


        // updates SQL, refreshes page, updates webpage
        function uploadCSV() {
            var formData = new FormData();
            formData.append('file', document.getElementById('fileInput').files[0]);
    
            fetch('/upload-csv', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(result => {
            if (result.error) {
                alert(result.error);
            } else {
                alert("CSV uploaded successfully!");
                location.reload();
                // Optionally, you can update the CSV data table here
                // For example, you can fetch and display the CSV data after successful upload
                // document.getElementById('csv_data').innerText = JSON.stringify(result.data);
                }
            })
            .catch(error => {
            console.error('Error:', error);
            alert("Try Again.");
            location.reload();
            });
        }   

        
    </script>
</body>
</html>
